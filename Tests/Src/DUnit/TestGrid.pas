unit TestGrid;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, Types, Engine.UCommon, Engine.UGrid, UStructs;

type
  TestTGrid = class(TTestCase)
  strict private
    fGrid0, fGrid0a, fGrid37x51, fGrid37x51a, fGrid4x4: TGrid;
    function IsZero(G: TGrid): Boolean;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestSize;
    procedure TestState;
    procedure TestStateByPt;
    procedure TestInitialise;
    procedure TestPopulation;
    procedure TestPatternBounds;
    procedure TestIsEqual;
    procedure TestAssign;
    procedure TestOrigin;
    procedure TestGridToUniverseCoord;
    procedure TestUniverseToGridCoord;
  end;

implementation

function TestTGrid.IsZero(G: TGrid): Boolean;
var
  X, Y: Integer;
begin
  Result := True;
  for X := 0 to Pred(G.Size.CX) do
    for Y := 0 to Pred(G.Size.CY) do
      if G[X, Y] = csOn then
        Exit(False);
end;

procedure TestTGrid.SetUp;
begin
  fGrid0 := TGrid.Create;
  fGrid0a := TGrid.Create;
  fGrid37x51 := TGrid.Create;
  fGrid37x51.SetSize(TSizeEx.Create(37,51));
  fGrid37x51a := TGrid.Create;
  fGrid37x51a.SetSize(TSizeEx.Create(37, 51));
  fGrid4x4 := TGrid.Create;
  fGrid4x4.SetSize(TSizeEx.Create(4, 4));
end;

procedure TestTGrid.TearDown;
begin
  fGrid0.Free;
  fGrid0a.Free;
  fGrid37x51.Free;
  fGrid37x51a.Free;
  fGrid4x4.Free;
end;

procedure TestTGrid.TestAssign;
var
  G: TGrid;
begin
  // used TGrid.IsEqual in tests, so run this test after IsEqual is tested
  fGrid4x4[1,1] := csOn;
  fGrid37x51[16,19] := csOn;
  fGrid37x51[19,18] := csOn;
  fGrid37x51[14,17] := csOn;
  G := TGrid.Create;
  try
    G.Assign(fGrid37x51);
    CheckTrue(fGrid37x51.IsEqual(G), 'Test 1a');
    CheckEquals(G.Population, fGrid37x51.Population, 'Test 1b');
    G.Assign(fGrid4x4);
    CheckTrue(G.IsEqual(fGrid4x4), 'Test 2a');
    CheckEquals(G.Population, fGrid4x4.Population, 'Test 2b');
    fGrid4x4[1,2] := csOn;
    CheckFalse(G.IsEqual(fGrid4x4), 'Test 3');
    G.Assign(fGrid0);
    CheckTrue(G.IsEqual(fGrid0), 'Test 4');
  finally
    G.Free;
  end;
end;

procedure TestTGrid.TestGridToUniverseCoord;
var
  UC: TPoint;
  G: TGrid;
begin
  G := TGrid.Create;
  try
    G.Size := TSizeEx.Create(17, 12); // origin = (8, 6)
    UC := G.GridToUniverseCoord(Point(0, 0));
    CheckEquals(-8, UC.X, 'Test 1 X');
    CheckEquals(-6, UC.Y, 'Test 1 Y');
    UC := G.GridToUniverseCoord(Point(16, 11));
    CheckEquals(+8, UC.X, 'Test 2 X');
    CheckEquals(+5, UC.Y, 'Test 2 Y');
    UC := G.GridToUniverseCoord(Point(8, 6));
    CheckEquals(0, UC.X, 'Test 3 X');
    CheckEquals(0, UC.Y, 'Test 3 Y');
  finally
    G.Free;
  end;
end;

procedure TestTGrid.TestInitialise;
begin
  fGrid37x51.Initialise;
  CheckTrue(IsZero(fGrid37x51), 'Test 1');
  fGrid37x51[3,5] := csOn;
  CheckFalse(IsZero(fGrid37x51), 'Test 2');
  fGrid37x51.Initialise;
  CheckTrue(IsZero(fGrid37x51), 'Test 3');
  // test that setting size clears grid;
  fGrid37x51[3,5] := csOn;
  CheckFalse(IsZero(fGrid37x51), 'Test Size 1');
  fGrid37x51.Size := TSizeEx.Create(14, 7);
  CheckTrue(IsZero(fGrid37x51), 'Test Size 2');
end;

procedure TestTGrid.TestIsEqual;
begin
  fGrid37x51.Initialise;
  fGrid37x51[16,19] := csOn;
  fGrid37x51[19,18] := csOn;
  fGrid37x51[14,17] := csOn;
  fGrid37x51a.Initialise;
  fGrid37x51a[16,19] := csOn;
  fGrid37x51a[19,18] := csOn;
  fGrid37x51a[14,17] := csOn;
  CheckTrue(fGrid37x51.IsEqual(fGrid37x51a), 'Test 1a');
  CheckTrue(fGrid37x51a.IsEqual(fGrid37x51), 'Test 1b');

  fGrid37x51a[14,17] := csOff;
  CheckFalse(fGrid37x51.IsEqual(fGrid37x51a), 'Test 2a');
  CheckFalse(fGrid37x51a.IsEqual(fGrid37x51), 'Test 2b');

  fGrid37x51.Initialise;
  fGrid37x51[1,1] := csOn;
  fGrid4x4.Initialise;
  fGrid4x4[1,1] := csOn;
  CheckFalse(fGrid4x4.IsEqual(fGrid37x51), 'Test 3');

  CheckFalse(fGrid37x51.IsEqual(fGrid0), 'Test 4');

  CheckTrue(fGrid0.IsEqual(fGrid0a), 'Test 5');

  fGrid37x51.Size := TSizeEx.Create(4,4);
  fGrid37x51[1,1] := csOn;
  CheckTrue(fGrid4x4.IsEqual(fGrid37x51), 'Test 6');
end;

procedure TestTGrid.TestOrigin;
var
  G: TGrid;
  O: TPoint;
begin
  G := TGrid.Create;
  try
    G.Size := TSizeEx.Create(7, 11);
    O := G.Origin;
    CheckEquals(3, O.X, 'Test 1 X');
    CheckEquals(5, O.Y, 'Test 1 Y');

    G.Size := TSizeEx.Create(8, 12);
    O := G.Origin;
    CheckEquals(4, O.X, 'Test 2 X');
    CheckEquals(6, O.Y, 'Test 2 Y');

    G.Size := TSizeEx.Create(7, 8);
    O := G.Origin;
    CheckEquals(3, O.X, 'Test 3 X');
    CheckEquals(4, O.Y, 'Test 3 Y');

    G.Size := TSizeEx.Create(8, 7);
    O := G.Origin;
    CheckEquals(4, O.X, 'Test 4 X');
    CheckEquals(3, O.Y, 'Test 4 Y');

    G.Size := TSizeEx.Create(4, 4);
    O := G.Origin;
    CheckEquals(2, O.X, 'Test 5 X');
    CheckEquals(2, O.Y, 'Test 5 Y');

    G.Size := TSizeEx.Create(3, 3);
    O := G.Origin;
    CheckEquals(1, O.X, 'Test 6 X');
    CheckEquals(1, O.Y, 'Test 6 Y');

    G.Size := TSizeEx.Create(2, 2);
    O := G.Origin;
    CheckEquals(1, O.X, 'Test 7 X');
    CheckEquals(1, O.Y, 'Test 7 Y');

    G.Size := TSizeEx.Create(1, 1);
    O := G.Origin;
    CheckEquals(0, O.X, 'Test 8 X');
    CheckEquals(0, O.Y, 'Test 8 Y');
  finally
    G.Free;
  end;
end;

procedure TestTGrid.TestPatternBounds;
var
  B: TPatternBounds;
  X, Y: UInt16;
begin
  fGrid37x51.Initialise;
  B := fGrid37x51.PatternBounds;
  CheckEquals(0, B.Size.CX, 'Test 1 cx');
  CheckEquals(0, B.Size.CY, 'Test 1 cy');

  fGrid37x51[16,19] := csOn;
  B := fGrid37x51.PatternBounds;
  CheckEquals(16, B.TopLeft.X, 'Test 2 x');
  CheckEquals(19, B.TopLeft.Y, 'Test 2 y');
  CheckEquals(1, B.Size.CX, 'Test 2 cx');
  CheckEquals(1, B.Size.CY, 'Test 2 cy');

  fGrid37x51[18,18] := csOn;
  B := fGrid37x51.PatternBounds;
  CheckEquals(16, B.TopLeft.X, 'Test 3 x');
  CheckEquals(18, B.TopLeft.Y, 'Test 3 y');
  CheckEquals(3, B.Size.CX, 'Test 3 cx');
  CheckEquals(2, B.Size.CY, 'Test 3 cy');

  fGrid37x51[15,21] := csOn;
  B := fGrid37x51.PatternBounds;
  CheckEquals(15, B.TopLeft.X, 'Test 4 x');
  CheckEquals(18, B.TopLeft.Y, 'Test 4 y');
  CheckEquals(4, B.Size.CX, 'Test 4 cx');
  CheckEquals(4, B.Size.CY, 'Test 4 cy');

  fGrid37x51[16,18] := csOn;
  fGrid37x51[17,18] := csOn;
  B := fGrid37x51.PatternBounds;
  CheckEquals(15, B.TopLeft.X, 'Test 5 x');
  CheckEquals(18, B.TopLeft.Y, 'Test 5 y');
  CheckEquals(4, B.Size.CX, 'Test 5 cx');
  CheckEquals(4, B.Size.CY, 'Test 5 cy');

  fGrid37x51[19,18] := csOn;
  fGrid37x51[14,17] := csOn;
  B := fGrid37x51.PatternBounds;
  CheckEquals(14, B.TopLeft.X, 'Test 6 x');
  CheckEquals(17, B.TopLeft.Y, 'Test 6 y');
  CheckEquals(6, B.Size.CX, 'Test 6 cx');
  CheckEquals(5, B.Size.CY, 'Test 6 cy');

  fGrid37x51[14,22] := csOn;
  B := fGrid37x51.PatternBounds;
  CheckEquals(14, B.TopLeft.X, 'Test 7 x');
  CheckEquals(17, B.TopLeft.Y, 'Test 7 y');
  CheckEquals(6, B.Size.CX, 'Test 7 cx');
  CheckEquals(6, B.Size.CY, 'Test 7 cy');

  fGrid37x51[12,18] := csOn;
  fGrid37x51[12,19] := csOn;
  fGrid37x51[12,20] := csOn;
  fGrid37x51[13,22] := csOn;
  B := fGrid37x51.PatternBounds;
  CheckEquals(12, B.TopLeft.X, 'Test 8 x');
  CheckEquals(17, B.TopLeft.Y, 'Test 8 y');
  CheckEquals(8, B.Size.CX, 'Test 8 cx');
  CheckEquals(6, B.Size.CY, 'Test 8 cy');

  fGrid37x51[14,19] := csOn;
  B := fGrid37x51.PatternBounds;
  CheckEquals(12, B.TopLeft.X, 'Test 9 x');
  CheckEquals(17, B.TopLeft.Y, 'Test 9 y');
  CheckEquals(8, B.Size.CX, 'Test 9 cx');
  CheckEquals(6, B.Size.CY, 'Test 9 cy');

  fGrid37x51[11,16] := csOn;
  fGrid37x51[19,17] := csOn;
  B := fGrid37x51.PatternBounds;
  CheckEquals(11, B.TopLeft.X, 'Test 10 x');
  CheckEquals(16, B.TopLeft.Y, 'Test 10 y');
  CheckEquals(9, B.Size.CX, 'Test 10 cx');
  CheckEquals(7, B.Size.CY, 'Test 10 cy');

  fGrid37x51[0,0] := csOn;
  fGrid37x51[0,50] := csOn;
  fGrid37x51[36,0] := csOn;
  fGrid37x51[36,50] := csOn;
  B := fGrid37x51.PatternBounds;
  CheckEquals(0, B.TopLeft.X, 'Test 11 x');
  CheckEquals(0, B.TopLeft.Y, 'Test 11 y');
  CheckEquals(37, B.Size.CX, 'Test 11 cx');
  CheckEquals(51, B.Size.CY, 'Test 11 cy');

  fGrid37x51.Initialise;
  fGrid37x51[0,0] := csOn;
  B := fGrid37x51.PatternBounds;
  CheckEquals(0, B.TopLeft.X, 'Test 12 x');
  CheckEquals(0, B.TopLeft.Y, 'Test 12 y');
  CheckEquals(1, B.Size.CX, 'Test 12 cx');
  CheckEquals(1, B.Size.CY, 'Test 12 cy');

  fGrid37x51.Initialise;
  fGrid37x51[36,50] := csOn;
  B := fGrid37x51.PatternBounds;
  CheckEquals(36, B.TopLeft.X, 'Test 13 x');
  CheckEquals(50, B.TopLeft.Y, 'Test 13 y');
  CheckEquals(1, B.Size.CX, 'Test 13 cx');
  CheckEquals(1, B.Size.CY, 'Test 13 cy');

  fGrid37x51.Initialise;
  fGrid37x51[36,0] := csOn;
  B := fGrid37x51.PatternBounds;
  CheckEquals(36, B.TopLeft.X, 'Test 14 x');
  CheckEquals(0, B.TopLeft.Y, 'Test 14 y');
  CheckEquals(1, B.Size.CX, 'Test 14 cx');
  CheckEquals(1, B.Size.CY, 'Test 14 cy');

  fGrid37x51.Initialise;
  fGrid37x51[0,50] := csOn;
  B := fGrid37x51.PatternBounds;
  CheckEquals(0, B.TopLeft.X, 'Test 15 x');
  CheckEquals(50, B.TopLeft.Y, 'Test 15 y');
  CheckEquals(1, B.Size.CX, 'Test 15 cx');
  CheckEquals(1, B.Size.CY, 'Test 15 cy');

  fGrid37x51.Initialise;
  fGrid37x51[0,50] := csOn;
  fGrid37x51[36,0] := csOn;
  B := fGrid37x51.PatternBounds;
  CheckEquals(0, B.TopLeft.X, 'Test 16 x');
  CheckEquals(0, B.TopLeft.Y, 'Test 16 y');
  CheckEquals(37, B.Size.CX, 'Test 16 cx');
  CheckEquals(51, B.Size.CY, 'Test 16 cy');

  fGrid37x51.Initialise;
  fGrid37x51[0,0] := csOn;
  fGrid37x51[36,50] := csOn;
  B := fGrid37x51.PatternBounds;
  CheckEquals(0, B.TopLeft.X, 'Test 16 x');
  CheckEquals(0, B.TopLeft.Y, 'Test 16 y');
  CheckEquals(37, B.Size.CX, 'Test 16 cx');
  CheckEquals(51, B.Size.CY, 'Test 16 cy');

  fGrid37x51.Initialise;
  fGrid37x51[1,1] := csOn;
  fGrid37x51[1,2] := csOn;
  fGrid37x51[2,1] := csOn;
  fGrid37x51[2,2] := csOn;
  B := fGrid37x51.PatternBounds;
  CheckEquals(1, B.TopLeft.X, 'Test 16 x');
  CheckEquals(1, B.TopLeft.Y, 'Test 16 y');
  CheckEquals(2, B.Size.CX, 'Test 16 cx');
  CheckEquals(2, B.Size.CY, 'Test 16 cy');

  fGrid37x51.Initialise;
  for X := 0 to Pred(fGrid37x51.Size.CX) do
    for Y := 0 to Pred(fGrid37x51.Size.CY) do
      fGrid37x51[X,Y] := csOn;
  B := fGrid37x51.PatternBounds;
  CheckEquals(0, B.TopLeft.X, 'Test 17 x');
  CheckEquals(0, B.TopLeft.Y, 'Test 17 y');
  CheckEquals(37, B.Size.CX, 'Test 17 cx');
  CheckEquals(51, B.Size.CY, 'Test 17 cy');

end;

procedure TestTGrid.TestPopulation;
begin
  CheckTrue(IsZero(fGrid37x51), 'Test for initial zeroed grid');
  CheckEquals(0, fGrid37x51.Population, 'Test 0');
  fGrid37x51[0, 0] := csOn;
  fGrid37x51[2, 7] := csOn;
  fGrid37x51[23, 34] := csOn;
  fGrid37x51[36, 50] := csOn;
  CheckEquals(4, fGrid37x51.Population, 'Test 1');
  fGrid37x51[23, 34] := csOff;
  CheckEquals(3, fGrid37x51.Population, 'Test 2');
  fGrid37x51[2, 7] := csOn;
  CheckEquals(3, fGrid37x51.Population, 'Test 3');
  fGrid37x51[1, 3] := csOff;
  CheckEquals(3, fGrid37x51.Population, 'Test 4');
  fGrid37x51.Initialise;
  CheckEquals(0, fGrid37x51.Population, 'Test 5');
end;

procedure TestTGrid.TestSize;
begin
  CheckEquals(0, fGrid0.Size.CX, 'Test 0 cx');
  CheckEquals(0, fGrid0.Size.CY, 'Test 0 cy');
  CheckEquals(37, fGrid37x51.Size.CX, 'Test 1 cx');
  CheckEquals(51, fGrid37x51.Size.CY, 'Test 1 cy');
  fGrid37x51.Size := TSizeEx.Create(12, 12);
  CheckEquals(12, fGrid37x51.Size.CX, 'Test 2 cx');
  CheckEquals(12, fGrid37x51.Size.CY, 'Test 2 cy');
  fGrid37x51.Size := TSizeEx.Create(0, 0);
  CheckEquals(0, fGrid37x51.Size.CX, 'Test 3 cx');
  CheckEquals(0, fGrid37x51.Size.CY, 'Test 3 cy');
end;

procedure TestTGrid.TestState;
begin
  fGrid37x51[3,5] := csOn;
  CheckTrue(fGrid37x51[3,5] = csOn, 'Test 1');
  fGrid37x51[3,5] := csOff;
  CheckTrue(fGrid37x51[3,5] = csOff, 'Test 2');
end;

procedure TestTGrid.TestStateByPt;
begin
  // Uses State[] in tests so test after State[]
  fGrid37x51.StateByPt[Point(3, 5)] := csOn;
  CheckTrue(fGrid37x51[3,5] = csOn, 'Test 1');
  fGrid37x51.StateByPt[Point(3, 5)] := csOff;
  CheckTrue(fGrid37x51[3,5] = csOff, 'Test 2');
  fGrid4x4[2,3] := csOn;
  CheckTrue(fGrid4x4[2,3] = fGrid4x4.StateByPt[Point(2,3)], 'Test 3');
  fGrid4x4[2,3] := csOff;
  CheckTrue(fGrid4x4[2,3] = fGrid4x4.StateByPt[Point(2,3)], 'Test 4');
end;

procedure TestTGrid.TestUniverseToGridCoord;
var
  GC: TPoint;
  G: TGrid;
begin
  G := TGrid.Create;
  try
    G.Size := TSizeEx.Create(17, 12); // origin = (8, 6)
    GC := G.UniverseToGridCoord(Point(0, 0));
    CheckEquals(8, GC.X, 'Test 1 X');
    CheckEquals(6, GC.Y, 'Test 1 Y');
    GC := G.UniverseToGridCoord(Point(-8, -6));
    CheckEquals(0, GC.X, 'Test 2 X');
    CheckEquals(0, GC.Y, 'Test 2 Y');
    GC := G.UniverseToGridCoord(Point(8, 5));
    CheckEquals(16, GC.X, 'Test 3 X');
    CheckEquals(11, GC.Y, 'Test 3 Y');
  finally
    G.Free;
  end;
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTGrid.Suite);
end.

