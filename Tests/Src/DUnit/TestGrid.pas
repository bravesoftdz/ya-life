unit TestGrid;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, Types, Engine.UCommon, Engine.UGrid;

type
  TestTGrid = class(TTestCase)
  strict private
    fGrid0, fGrid3751: IGrid;
    function CreateSize(const X, Y: Integer): TSize;
    function IsZero(G: IGrid): Boolean;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestSize;
    procedure TestState;
    procedure TestInitialise;
    procedure TestPopulation;
    procedure TestPatternOffset;
  end;

implementation

function TestTGrid.CreateSize(const X, Y: Integer): TSize;
begin
  Result.cx := X;
  Result.cy := Y;
end;

function TestTGrid.IsZero(G: IGrid): Boolean;
var
  X, Y: UInt16;
begin
  Result := True;
  for X := 0 to Pred(G.Size.cx) do
    for Y := 0 to Pred(G.Size.cy) do
      if G[X, Y] = csOn then
        Exit(False);
end;

procedure TestTGrid.SetUp;
begin
  fGrid0 := TGrid.Create;
  fGrid3751 := TGrid.Create;
  fGrid3751.SetSize(CreateSize(37,51));
end;

procedure TestTGrid.TearDown;
begin
  fGrid0 := nil;
  fGrid3751 := nil;
end;

procedure TestTGrid.TestInitialise;
begin
  fGrid3751.Initialise;
  CheckTrue(IsZero(fGrid3751), 'Test 1');
  fGrid3751[3,5] := csOn;
  CheckFalse(IsZero(fGrid3751), 'Test 2');
  fGrid3751.Initialise;
  CheckTrue(IsZero(fGrid3751), 'Test 3');
  // test that setting size clears grid;
  fGrid3751[3,5] := csOn;
  CheckFalse(IsZero(fGrid3751), 'Test Size 1');
  fGrid3751.Size := CreateSize(14, 7);
  CheckTrue(IsZero(fGrid3751), 'Test Size 2');
end;

procedure TestTGrid.TestPatternOffset;
var
  Offset: TPoint;
begin
  fGrid3751.Initialise;
  Offset := fGrid3751.PatternOffset;
  CheckEquals(-1, Offset.X, 'Test 1a');
  CheckEquals(-1, Offset.Y, 'Test 1b');
  fGrid3751.State[7, 5] := csOn;
  Offset := fGrid3751.PatternOffset;
  CheckEquals(7, Offset.X, 'Test 2a');
  CheckEquals(5, Offset.Y, 'Test 2b');
  fGrid3751.State[6, 10] := csOn;
  Offset := fGrid3751.PatternOffset;
  CheckEquals(6, Offset.X, 'Test 3a');
  CheckEquals(5, Offset.Y, 'Test 3b');
  fGrid3751.State[8, 8] := csOn;
  Offset := fGrid3751.PatternOffset;
  CheckEquals(6, Offset.X, 'Test 4a');
  CheckEquals(5, Offset.Y, 'Test 4b');
  fGrid3751.State[7, 2] := csOn;
  Offset := fGrid3751.PatternOffset;
  CheckEquals(6, Offset.X, 'Test 5a');
  CheckEquals(2, Offset.Y, 'Test 5b');
  fGrid3751.State[2, 1] := csOn;
  Offset := fGrid3751.PatternOffset;
  CheckEquals(2, Offset.X, 'Test 6a');
  CheckEquals(1, Offset.Y, 'Test 6b');
end;

procedure TestTGrid.TestPopulation;
begin
  CheckTrue(IsZero(fGrid3751), 'Test for initial zeroed grid');
  CheckEquals(0, fGrid3751.Population, 'Test 0');
  fGrid3751[0, 0] := csOn;
  fGrid3751[2, 7] := csOn;
  fGrid3751[23, 34] := csOn;
  fGrid3751[36, 50] := csOn;
  CheckEquals(4, fGrid3751.Population, 'Test 1');
  fGrid3751[23, 34] := csOff;
  CheckEquals(3, fGrid3751.Population, 'Test 2');
  fGrid3751[2, 7] := csOn;
  CheckEquals(3, fGrid3751.Population, 'Test 3');
  fGrid3751[1, 3] := csOff;
  CheckEquals(3, fGrid3751.Population, 'Test 4');
  fGrid3751.Initialise;
  CheckEquals(0, fGrid3751.Population, 'Test 5');
end;

procedure TestTGrid.TestSize;
begin
  CheckEquals(0, fGrid0.Size.cx, 'Test 0 cx');
  CheckEquals(0, fGrid0.Size.cy, 'Test 0 cy');
  CheckEquals(37, fGrid3751.Size.cx, 'Test 1 cx');
  CheckEquals(51, fGrid3751.Size.cy, 'Test 1 cy');
  fGrid3751.Size := CreateSize(12, 12);
  CheckEquals(12, fGrid3751.Size.cx, 'Test 2 cx');
  CheckEquals(12, fGrid3751.Size.cy, 'Test 2 cy');
end;

procedure TestTGrid.TestState;
begin
  fGrid3751[3,5] := csOn;
  CheckTrue(fGrid3751[3,5] = csOn, 'Test 1');
  fGrid3751[3,5] := csOff;
  CheckTrue(fGrid3751[3,5] = csOff, 'Test 2');
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTGrid.Suite);
end.

