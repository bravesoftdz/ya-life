unit TestLife106Filter;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, UStructs, Engine.UPattern, Engine.UGrid, Generics.Collections,
  Types, Classes, SysUtils, Filters.ULife106, Engine.UCommon;

type
  // Test methods for class TLife106Reader
  TestTLife106Reader = class(TTestCase)
  strict private
    fReader: TLife106Reader;
    fPattern: TPattern;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestLoadFromFile;
  end;

  // Test methods for class TLife106Writer
  // NOTE: run these tests after those for TLife106Reader because they use
  // TLife106Reader as part of tests
  TestTLife106Writer = class(TTestCase)
  strict private
    fWriter: TLife106Writer;
    fPattern: TPattern;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestSaveToStream;
  end;

implementation

const
  PatQuadPole: array[0..6] of string = (
    '1100000',
    '1010000',
    '0000000',
    '0010100',
    '0000000',
    '0000101',
    '0000011'
  );

  Pat2Fumaroles: array[0..11] of string = (
    '110000000000000',
    '100110000100000',
    '011011000100000',
    '000011000100000',
    '000011000000000',
    '011011000011000',
    '100110001000010',
    '110000001000010',
    '000000001000010',
    '000000000100100',
    '000000010100101',
    '000000011000011'
  );

procedure SetupGrid(const G: TGrid; Pat: array of string);
var
  X, Y: Integer;
begin
  G.Initialise;
  for Y := 0 to Pred(G.Size.CY) do
    for X := 0 to Pred(G.Size.CX) do
      if Pat[Y, X+1] = '1' then
        G[X, Y] := csOn;
end;

procedure TestTLife106Reader.SetUp;
begin
  fReader := TLife106Reader.Create;
  fPattern := TPattern.Create;
end;

procedure TestTLife106Reader.TearDown;
begin
  fPattern.Free;
  fReader.Free;
end;

procedure TestTLife106Reader.TestLoadFromFile;
var
  G: TGrid;
  FileName: string;
begin
  // Quadpole
  FileName := ExtractFilePath(ParamStr(0)) + '..\Files\quadpole_106.lif';
  fReader.LoadFromFile(fPattern, FileName);
  G := TGrid.Create;
  try
    G.Size := TSizeEx.Create(7, 7);
    SetupGrid(G, PatQuadPole);
    CheckTrue(G.IsEqual(fPattern.Grid), 'Test 1 Grid');
    CheckEquals('', fPattern.Name, 'Test 1 Name');
    CheckEquals('', fPattern.Author, 'Test 1 Author');
    CheckEquals(0, fPattern.Description.Count, 'Test 1 Description.Count');
    CheckTrue(fPattern.Rule.IsNull, 'Test 1 Rule');
    CheckEquals(Ord(poCentre), Ord(fPattern.Origin), 'Test 1 Origin');
  finally
    G.Free;
  end;

  // 2 Fumaroles
  FileName := ExtractFilePath(ParamStr(0)) + '..\Files\2fumaroles_106.lif';
  fReader.LoadFromFile(fPattern, FileName);
  G := TGrid.Create;
  try
    G.Size := TSizeEx.Create(15, 12);
    SetupGrid(G, Pat2Fumaroles);
    CheckTrue(G.IsEqual(fPattern.Grid), 'Test 2 Grid');
    CheckEquals('', fPattern.Name, 'Test 2 Name');
    CheckEquals('', fPattern.Author, 'Test 2 Author');
    CheckEquals(0, fPattern.Description.Count, 'Test 2 Description.Count');
    CheckTrue(fPattern.Rule.IsNull, 'Test 2 Rule');
    CheckEquals(Ord(poCentre), Ord(fPattern.Origin), 'Test 2 Origin');
  finally
    G.Free;
  end;
end;

procedure TestTLife106Writer.SetUp;
begin
  fWriter := TLife106Writer.Create;
  fPattern := TPattern.Create;
end;

procedure TestTLife106Writer.TearDown;
begin
  fPattern.Free;
  fWriter.Free;
end;

procedure TestTLife106Writer.TestSaveToStream;
var
  Stm: TStringStream;
  P: TPattern;
  R: TLife106Reader;
begin
  Stm := TStringStream.Create('', TEncoding.ASCII);
  try
    // QuadPole
    fPattern.Grid.Size := TSizeEx.Create(7, 7);
    SetupGrid(fPattern.Grid, PatQuadPole);
    fWriter.SaveToStream(fPattern, Stm);
    R := nil;
    P := TPattern.Create;
    try
      R := TLife106Reader.Create;
      Stm.Position := 0;
      R.LoadFromStream(P, Stm);
      CheckTrue(P.Grid.IsEqual(fPattern.Grid), 'Test 1: Grid');
      CheckTrue(fPattern.Rule.IsNull, 'Test 1: Rule');
      CheckEquals(Ord(poCentre), Ord(fPattern.Origin), 'Test 1: Origin');
      CheckEquals('', fPattern.Name, 'Test 1: Name');
      CheckEquals('', fPattern.Author, 'Test 1: Author');
      CheckEquals(0, fPattern.Description.Count, 'Test 1: Description');
    finally
      R.Free;
      P.Free;
    end;
  finally
    Stm.Free;
  end;

  Stm := TStringStream.Create('', TEncoding.ASCII);
  try
    // QuadPole
    fPattern.Grid.Size := TSizeEx.Create(15, 12);
    SetupGrid(fPattern.Grid, Pat2Fumaroles);
    fWriter.SaveToStream(fPattern, Stm);
    R := nil;
    P := TPattern.Create;
    try
      R := TLife106Reader.Create;
      Stm.Position := 0;
      R.LoadFromStream(P, Stm);
      CheckTrue(P.Grid.IsEqual(fPattern.Grid), 'Test 2: Grid');
      CheckTrue(fPattern.Rule.IsNull, 'Test 2: Rule');
      CheckEquals(Ord(poCentre), Ord(fPattern.Origin), 'Test 2: Origin');
      CheckEquals('', fPattern.Name, 'Test 2: Name');
      CheckEquals('', fPattern.Author, 'Test 2: Author');
      CheckEquals(0, fPattern.Description.Count, 'Test 2: Description');
    finally
      R.Free;
      P.Free;
    end;
  finally
    Stm.Free;
  end;
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTLife106Reader.Suite);
  RegisterTest(TestTLife106Writer.Suite);
end.

