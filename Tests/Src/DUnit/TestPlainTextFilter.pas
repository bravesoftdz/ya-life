unit TestPlainTextFilter;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, Classes, SysUtils, Filters.UPlainText, UStructs,
  Engine.UCommon, Engine.UGrid, Engine.UPattern, Engine.URules;

type

  // Test methods for class TPlainTextReader
  TestTPlainTextReader = class(TTestCase)
  strict private
    fReader: TPlainTextReader;
    fPattern: TPattern;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestLoadFromFile;
  end;

  // Test methods for class TPlainTextWriter
  TestTPlainTextWriter = class(TTestCase)
  strict private
    fWriter: TPlainTextWriter;
    fPattern: TPattern;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestSaveToStream;
  end;

implementation

const
  PatQuadPole: array[0..6] of string = (
    '1100000',
    '1010000',
    '0000000',
    '0010100',
    '0000000',
    '0000101',
    '0000011'
  );

  Pat2Fumaroles: array[0..11] of string = (
    '110000000000000',
    '100110000100000',
    '011011000100000',
    '000011000100000',
    '000011000000000',
    '011011000011000',
    '100110001000010',
    '110000001000010',
    '000000001000010',
    '000000000100100',
    '000000010100101',
    '000000011000011'
  );

  ExpectedQuadPole: array[0..11] of string = (
    '!Name: QUADPOLE',
    '!Author: Unknown',
    '!The barberpole of length 4.',
    '!www.conwaylife.com/wiki/index.php?title=Quadpole',
    '!',
    'OO',
    'O.O',
    '',
    '..O.O',
    '',
    '....O.O',
    '.....OO'
  );

  Expected2Fumaroles: array[0..11] of string = (
    'OO',
    'O..OO....O',
    '.OO.OO...O',
    '....OO...O',
    '....OO',
    '.OO.OO....OO',
    'O..OO...O....O',
    'OO......O....O',
    '........O....O',
    '.........O..O',
    '.......O.O..O.O',
    '.......OO....OO'
  );

procedure SetupGrid(const G: TGrid; Pat: array of string);
var
  X, Y: Integer;
begin
  G.Initialise;
  for Y := 0 to Pred(G.Size.CY) do
    for X := 0 to Pred(G.Size.CX) do
      if Pat[Y, X+1] = '1' then
        G[X, Y] := csOn;
end;

procedure TestTPlainTextReader.SetUp;
begin
  fReader := TPlainTextReader.Create;
  fPattern := TPattern.Create;
  fPattern.Origin := poCentreOffset;
  fPattern.Name := 'Pattern-42';
  fPattern.Author := 'John Smith';
  fPattern.Description.Add('Foo bar');
  fPattern.Rule := TRule.Create([2,3, 4], [5]);
end;

procedure TestTPlainTextReader.TearDown;
begin
  fPattern.Free;
  fReader.Free;
end;

procedure TestTPlainTextReader.TestLoadFromFile;
var
  FileName: TFileName;
  G: TGrid;
begin
  // Quadpole: has duplicate name, empty ! and x as well as . for OFF cells
  FileName := ExtractFilePath(ParamStr(0)) + '..\Files\quadpole.cells';
  fReader.LoadFromFile(fPattern, FileName);
  G := TGrid.Create;
  try
    G.Size := TSizeEx.Create(7, 7);
    SetupGrid(G, PatQuadPole);
    CheckTrue(G.IsEqual(fPattern.Grid), 'Test 1 Grid');
    CheckEquals('Quadpole', fPattern.Name, 'Test 1 Name');
    CheckEquals('Unknown', fPattern.Author, 'Test 1 Author');
    CheckEquals(2, fPattern.Description.Count, 'Test 1 Description.Count');
    CheckEquals(
      'The barberpole of length 4.',
      fPattern.Description[0],
      'Test 1 Description[0]'
    );
    CheckEquals(
      'www.conwaylife.com/wiki/index.php?title=Quadpole',
      fPattern.Description[1],
      'Test 1 Description[1]'
    );
    CheckTrue(fPattern.Rule.IsNull, 'Test 1 Rule');
    CheckEquals(Ord(poCentre), Ord(fPattern.Origin), 'Test 1 Origin');
  finally
    G.Free;
  end;

  // 2 Fumaroles (no comments)
  FileName := ExtractFilePath(ParamStr(0)) + '..\Files\2fumaroles.cells';
  fReader.LoadFromFile(fPattern, FileName);
  G := TGrid.Create;
  try
    G.Size := TSizeEx.Create(15, 12);
    SetupGrid(G, Pat2Fumaroles);
    CheckTrue(G.IsEqual(fPattern.Grid), 'Test 2 Grid');
    CheckEquals('', fPattern.Name, 'Test 2 Name');
    CheckEquals('', fPattern.Author, 'Test 2 Author');
    CheckEquals(0, fPattern.Description.Count, 'Test 2 Description.Count');
    CheckTrue(fPattern.Rule.IsNull, 'Test 2 Rule');
    CheckEquals(Ord(poCentre), Ord(fPattern.Origin), 'Test 2 Origin');
  finally
    G.Free;
  end;
end;

procedure TestTPlainTextWriter.SetUp;
begin
  fWriter := TPlainTextWriter.Create;
  fPattern := TPattern.Create;
end;

procedure TestTPlainTextWriter.TearDown;
begin
  fPattern.Free;
  fWriter.Free;
end;

procedure TestTPlainTextWriter.TestSaveToStream;
var
  Stm: TStringStream;
  Lines: TStringList;
  Idx: Integer;
begin
  Stm := TStringStream.Create('', TEncoding.ASCII);
  try
    fPattern.Name := 'QUADPOLE';
    fPattern.Author := 'Unknown';
    fPattern.Description.Add('The barberpole of length 4.');
    fPattern.Description.Add(
      'www.conwaylife.com/wiki/index.php?title=Quadpole'
    );
    fPattern.Grid.Size := TSizeEx.Create(7, 7);
    SetupGrid(fPattern.Grid, PatQuadPole);
    fWriter.SaveToStream(fPattern, Stm);
    Lines := TStringList.Create;
    try
      Lines.Text := Stm.DataString;
      CheckEquals(Length(ExpectedQuadPole), Lines.Count, 'Test 1: data size');
      for Idx := 0 to Pred(Lines.Count) do
        CheckEquals(
          ExpectedQuadPole[Idx], Lines[Idx], 'Test 1: line ' + IntToStr(Idx)
        );
    finally
      Lines.Free;
    end;
  finally
    Stm.Free;
  end;

  Stm := TStringStream.Create('', TEncoding.ASCII);
  try
    fPattern.Name := '';
    fPattern.Author := '';
    fPattern.Description.Clear;
    fPattern.Grid.Size := TSizeEx.Create(15, 12);
    SetupGrid(fPattern.Grid, Pat2Fumaroles);
    fWriter.SaveToStream(fPattern, Stm);
    Lines := TStringList.Create;
    try
      Lines.Text := Stm.DataString;
      CheckEquals(Length(Expected2Fumaroles), Lines.Count, 'Test 2: data size');
      for Idx := 0 to Pred(Lines.Count) do
        CheckEquals(
          Expected2Fumaroles[Idx], Lines[Idx], 'Test 2: line ' + IntToStr(Idx)
        );
    finally
      Lines.Free;
    end;
  finally
    Stm.Free;
  end;
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTPlainTextReader.Suite);
  RegisterTest(TestTPlainTextWriter.Suite);
end.

